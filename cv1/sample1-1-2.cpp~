#include <opencv2/opencv.hpp>
#include <stdio.h>

#define FLAG 1

char *preset_file="fruits.jpg";

void convertColorToGray(cv::Mat &input,cv::Mat &processed);
void convertGauss(cv::Mat &input,cv::Mat &processed);
void convertedge(cv::Mat &input,cv::Mat &processed);

int main(int argc,char *argv[]){
  char *input_file;

  cv::Mat input;
  std::vector<cv::Mat> processed(3);
  
  if(argc==2){
	      input_file=argv[1];
  }else {
    input_file=preset_file;
  }
  input=cv::imread(input_file,1);
  if(input.empty()){
    fprintf(stderr,"cannot open %s\n",input_file);
    exit(0);
  }

  convertColorToGray(input,processed[0]);
  convertGauss(input,processed[1]);
  convertedge(input,processed[2]);
  cv::namedWindow("original image",1);
  cv::namedWindow("processed1 image",1);
  cv::namedWindows("processed2 image",1);
  cv::namedWindows("processed3 image",1);
  cv::imshow("original image",input);
  cv::imshow("processed1 image",processed[0]);
  cv::imshow("processed2 image",processed[1]);
  cv::imshow("processed3 image",processed[2]);
  cv::waitKey(0);

  cv::imwrite("processed1.jpg",processed[0]);
  cv::imwrite("processed2.jpg",processed[1]);
  cv::imwrite("processed3.jpg",processed[2]);
  return 0;
}

void convertColorToGray(cv::Mat &input,cv::Mat &processed){
  #if FLAG
  cv::Mat temp;
  std::vector<cv::Mat> planes;
  cv::cvtColor(input,temp,CV_BGR2YCrCb);
  cv::split(temp,planes);
  processed=planes[0];
  #else
  cv::Size s=input.size();
  processed.create(s,CV_8UC1);

  for(int j=0;j<s.height;j++){
    uchar *ptr1,*ptr2;
    ptr1=input.ptr<uchar>(j);
    ptr2=processed.ptr<uchar>(j);

    for(int i=0;i<s.width;i++){
      double y=0.114*((double)ptr1[0])+0.587*(double)ptr1[1]+0.299*(double)ptr1[2];
      if(y>255)y=255;
      if(y<0)y=0;

      *ptr2=(uchar)y;
      ptr1+=3;
      ptr2++;
    }
  }
#endif
}
void convertGauss(cv::Mat &input,cv::Mat &processed){
  #if FLAG
  cv::Mat temp;
  std::vector<cv::Mat> planes;
  cv::GaussianBlur(input,temp,cv::Size(99,99),0,0);
  processed=temp;
  #endif
}
void convertedge(cv::Mat &input,cv::Mat &processed){
  #if FLAG
  cv::Mat temp,temp2;
  std::vector<cv::Mat> planes;
  cv::cvtColor(input,temp,CV_BGR2GRAY);
  cv::Sobel(temp,temp2,CV_32F,1,1);
  cv::convertScaleAbs(temp2,processed,1,0);
  #endif
}
