#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <stdio.h>
#define WIDTH 320
#define HEIGHT 240
int main(int argc,char *argv[]){
  std::cout<<"version:" << CV_VERSION << std::endl;
  cv::VideoCapture cap(1);
  cap.set(CV_CAP_PROP_FRAME_WIDTH,WIDTH);
  cap.set(CV_CAP_PROP_FRAME_HEIGHT,HEIGHT);
  if(!cap.isOpened()){
    printf("かめらが検出されませんでした。");
    exit(0);
  }
  cv::Mat input_img;
  cv::Mat hsv_skin_img=cv::Mat(cv::Size(WIDTH,HEIGHT),CV_32FC3);
  cv::Mat smooth_img;
  cv::Mat hsv_img;
  std::vector< std::vector< cv::Point > > contours;
  cv::namedWindow("input_img",CV_WINDOW_AUTOSIZE);
  double maxarea;
  int idx;
  int maxid;
  while(1){
    maxarea=0;
    idx=0;
    maxid;
    hsv_skin_img=cv::Scalar(0,0,0);
    cap>>input_img;
    cv::medianBlur(input_img,smooth_img,7);//ノイズがあるので平滑化
    cv::cvtColor(smooth_img,hsv_img,CV_BGR2HSV);//HSVに変換
    cv::inRange(hsv_img,cv::Scalar(0,58,89),cv::Scalar(25,173,229),hsv_skin_img);
    cv::findContours(hsv_skin_img,contours,CV_RETR_LIST,CV_CHAIN_APPROX_NONE);
    
    for(auto contour = contours.begin() ; contour!=contours.end() ; contour++){
      cv::polylines(input_img,*contour,true,cv::Scalar(0,255,0),2);
      idx++;
      if(maxarea<=contourArea(*contour)) {
	maxarea=contourArea(*contour);
	maxid=idx;
	std::cout << maxarea<<":"<<maxid<<std::endl;
	
      }
    }
    //cv::imshow("input_img",contours
    /*
    for(int y=0;y<HEIGHT;y++){
      for(int x=0;x<WIDTH;x++){
	int a=hsv_img.step*y+(x*3);
	if(hsv_img.data[a]>0&&hsv_img.data[a]<=15&&hsv_img.data[a+1]>=50&&hsv_img.data[a+2]>=50){
	  hsv_skin_img.data[a]=255;//肌色部分をあおに
	}
      }
    }
    */
    cv::imshow("input_img",input_img);
    cv::imshow("hsv_skin_img",hsv_skin_img);
    if(cv::waitKey(30)>=0){
      break;
    }
  }
}
